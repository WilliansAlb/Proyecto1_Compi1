package Analizadores;

import java_cup.runtime.Symbol;
import POJOS.Solicitud;
import POJOS.Usuario;
import POJOS.Consulta;
import POJOS.Errores;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

parser code
{:
    private Symbol sym;
    
    public Solicitud temporal = new Solicitud();
    public Map<String,String> lista_temporal = new HashMap<>();
    public Map<String,String> res_temp = new HashMap<>();
    public ArrayList<Consulta> lista_consultas = new ArrayList<>();
    public ArrayList<Solicitud> lista_solicitudes = new ArrayList<>();
    public ArrayList<Errores> errores = new ArrayList<>();
    public Usuario logeado = new Usuario();
    public Usuario retorno = new Usuario();
    public Consulta cons_temp = new Consulta();
    public String armando = "";
    public boolean error = false;

    public Symbol getS(){
        return this.sym;
    }

    public void agregarParametroAMap(String key, String valor){
        if (lista_temporal.containsKey(key)){
            temporal.setTieneErrores(true);
            temporal.setDescripcion_error(temporal.getDescripcion_error()+"Existe ya un parametro para "+key+" y se está intentando enviar otro: "+valor+"\n");
            lista_temporal.put("ERROR","PARAMETROS REPETIDOS");
            String tem = lista_temporal.get(key);
            if (lista_temporal.get(key).equals("OPCIONES")){
                tem += "\t"+valor;
            } else {
                tem += "\n"+valor;
            }
            lista_temporal.put(key,tem);
        } else {
            lista_temporal.put(key,valor);
        }
    }

    public void imp(String texto){
        System.out.println(texto);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void syntax_error(Symbol cur_token) {
        error = true;
        ArrayList<String> esperados = new ArrayList<>();
        for (int i = 0; i < expected_token_ids().size(); i++){
            if (!symbl_name_from_id(expected_token_ids().get(i)).equals("error")){
                esperados.add(symbl_name_from_id(expected_token_ids().get(i)));
            }
        }
        String nom = symbl_name_from_id(cur_token.sym);
        String tip = "Lexico";
        if (!nom.equals("ERRORLEX")){
            tip = "Sintactico";
        }
        errores.add(new Errores(esperados,cur_token,nom,tip));
    }

    protected int error_sync_size() {
        return 1;
    }

:};

terminal COMILLAS, INICIOE, DOSP, FINE, MAYORQ, MENORQ, CREARU, USUARIOP, MODIFICARU, USUARIOAP, USUARIONP, NUEVOP,
    CONTRAP, FECHACP, FECHAMP, ELIMINARU, LOGINU, NUEVOFP, TITULO, ALINEA, BOOL, DEC,
    PARENTESISA, PARENTESISC, USUARIO, FECHA, IDP, TITULOP, NOMBREP, TEMAP, USUARIOCP, TEMA, ELIMINARF,
    LLAVEA, LLAVEC, CORCHETEA, CORCHETEC, SOLICITUDESP, FINSOLICITUDES, MODIFICARF, PARAMF, AGREGARC, NOMBREC,
    NUMERO, INICIOS, FINS, COMA, ID, URL, FORMULARIOC, CLASE, INDICEC, TEXTOVC, ALINEAC, REQUERIDO, OPCIONES, FILAS,
    COLUMNAS, URLC, ELIMINARC, PARAMC, MODIFICARC, CREDENCIALES, OR, CLASENORMAL, CLASEAREA, CLASEOPCIONES, CLASEIMAGEN, CLASEBOTON,
    CONSULTARD,CONSULTASP,NOCONSULTA,SELECT,WHERE, DE,NOT,AND,OROP,IGUAL,MAYORIGUAL,MENORIGUAL,APOSTROFE,ERRORLEX;

non terminal inicio, solicitud, bloque_usuario1, bloque_solicitudes, tipo_solicitud, inicio_param_usuario,
    parametro_usuario, parametros_crear, parametro_contra, parametro_fecha, parametro_login, bloque_usuario2, parametros_modificarU,
    parametro_usuario_antiguo, parametro_usuario_nuevo, parametro_contra_nueva, parametro_fecha_modificacion, inicio_param_formulario,
    bloque_formulario1, parametros_formulario, parametro_id, parametro_titulo, parametro_nombre, parametro_usuario_creacion,
    parametro_tema, bloque_formulario2, parametros_formulario2, inicio_param_componente, bloque_componente1, parametros_agregar,
    parametro_nombre_campo, parametro_formulario, parametro_clase, parametro_indice, parametro_texto, parametro_alineacion,
    parametro_requerido, parametro_opciones, bloque_opciones, parametro_filas, parametro_columnas, parametro_url, bloque_eliminar,
    bloque1, bloque2, bloque3, bloque4, bloque5, bloque6, bloque7, bloque8, inicio_param_datos, bloque9, bloque9P, bloque_consultas, bloque_consultasP,
    descripcion_consulta, nombre_campos, campos, camposP, restricciones, partida, posibilidad, bloque1P, bloque_usuario1P, bloque2P, bloque3P,
    bloque4P, bloque5P, bloque6P, bloque7P, bloque8P, bloque_componente1P, bloque_usuario2P, bloque_formulario1P, bloque_formulario2P;

non terminal String tipo_palabra, tipo_opcion, condicion_numerica, tipos_de_clases, campo;
non terminal Map<String,String> tipo_condicion, condicional, tipo_numero, tipo_dato;
non terminal ArrayList<Map<String,String>>  restriccion;

precedence left OROP;
precedence left AND;
precedence left NOT;

start with inicio;

inicio::=
    INICIOE partida
    | error posibilidad {: imp("hasta encontrar"); :}
;

posibilidad::=
    | partida
    | INICIOE partida
;

partida::=
    SOLICITUDESP MAYORQ bloque_solicitudes INICIOE FINSOLICITUDES MAYORQ
    | INICIOS COMILLAS tipo_solicitud MENORQ FINS FINE {:lista_solicitudes.add(temporal); temporal = new Solicitud();:}
    | error {: imp("partida");:}
;


bloque_solicitudes::=
    bloque_solicitudes solicitud
    | solicitud
    | error solicitud
;

solicitud::=
    INICIOE INICIOS COMILLAS tipo_solicitud MENORQ FINS FINE {:lista_solicitudes.add(temporal); temporal = new Solicitud();:}
;

tipo_solicitud::=
    CREARU inicio_param_usuario bloque1 CORCHETEC LLAVEC            {:temporal.setTipo("CREAR_USUARIO");  logeado = new Usuario();:}
    | MODIFICARU inicio_param_usuario bloque2 CORCHETEC LLAVEC      {:temporal.setTipo("MODIFICAR_USUARIO");:}
    | ELIMINARU inicio_param_usuario bloque3 CORCHETEC LLAVEC       {:temporal.setTipo("ELIMINAR_USUARIO");:}
    | LOGINU inicio_param_usuario LLAVEA parametro_login LLAVEC CORCHETEC LLAVEC {:retorno = logeado; logeado = new Usuario(); temporal.setTipo("LOGIN");:}
    | NUEVOFP inicio_param_formulario bloque4 CORCHETEC LLAVEC      {:temporal.setTipo("NUEVO_FORMULARIO");:}
    | ELIMINARF inicio_param_formulario bloque5 CORCHETEC LLAVEC    {:temporal.setTipo("ELIMINAR_FORMULARIO");:}
    | MODIFICARF inicio_param_formulario bloque6 CORCHETEC LLAVEC   {:temporal.setTipo("MODIFICAR_FORMULARIO");:}
    | AGREGARC inicio_param_componente bloque7 CORCHETEC LLAVEC     {:temporal.setTipo("AGREGAR_COMPONENTE");:}
    | ELIMINARC inicio_param_componente bloque8 CORCHETEC LLAVEC    {:temporal.setTipo("ELIMINAR_COMPONENTE");:}
    | MODIFICARC inicio_param_componente bloque7 CORCHETEC LLAVEC   {:temporal.setTipo("MODIFICAR_COMPONENTE");:}
    | CONSULTARD inicio_param_datos bloque9 CORCHETEC LLAVEC        {:temporal.setTipo("CONSULTAR_DATOS");:}
    | error
;

bloque1::=
    LLAVEA bloque_usuario1 LLAVEC bloque1P {:temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);:}
    | error bloque1P
;

bloque1P::=
    | COMA bloque1
;

bloque2::=
    LLAVEA bloque_usuario2 LLAVEC bloque2P                 {:temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);:}
    | error bloque2P
;

bloque2P::=
    | COMA bloque2
;

bloque3::=
    LLAVEA parametro_usuario LLAVEC bloque3P               {:temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);:}
    | error bloque3P
;

bloque3P::=
    | COMA bloque3
;

bloque4::=
    LLAVEA bloque_formulario1 LLAVEC bloque4P             {:temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);:}
    | error bloque4P
;

bloque4P::=
    | COMA bloque4
;

bloque5::=
    LLAVEA parametro_id LLAVEC bloque5P                   {:temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);:}
    | error bloque5P
;

bloque5P::=
    | COMA bloque5
;

bloque6::=
    LLAVEA bloque_formulario2 LLAVEC bloque6P              {:temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);:}
    | error bloque6P
;

bloque6P::=
    | COMA bloque6
;

bloque7::=
    LLAVEA bloque_componente1 LLAVEC bloque7P             {:temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);:}
    | error bloque7P
;

bloque7P::=
    | COMA bloque7
;

bloque8::=
    LLAVEA bloque_eliminar LLAVEC bloque8P                {:temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);:}
    | error bloque8P
;

bloque8P::=
    | COMA bloque8
;

inicio_param_usuario::=
    COMILLAS MAYORQ LLAVEA COMILLAS CREDENCIALES COMILLAS DOSP CORCHETEA
    | error {: imp("parametro usuario"); :}
;

inicio_param_formulario::=
    COMILLAS MAYORQ LLAVEA COMILLAS PARAMF COMILLAS DOSP CORCHETEA 
;

inicio_param_componente::=
    COMILLAS MAYORQ LLAVEA COMILLAS PARAMC COMILLAS DOSP CORCHETEA 
;


bloque_eliminar::=
    parametro_id COMA parametro_formulario
    | parametro_formulario COMA parametro_id
;

bloque_componente1::=
    parametros_agregar bloque_componente1P
    | error bloque_componente1P
;

bloque_componente1P::=
    | COMA bloque_componente1
;

parametros_agregar::=
    parametro_id
    | parametro_formulario
    | parametro_nombre_campo
    | parametro_clase
    | parametro_indice
    | parametro_texto
    | parametro_alineacion
    | parametro_opciones
    | parametro_requerido
    | parametro_filas
    | parametro_columnas
    | parametro_url
;

bloque_usuario1::=
    parametros_crear bloque_usuario1P
    | error bloque_usuario1P {: imp("falla acá");:}
;

bloque_usuario1P::=
    | COMA bloque_usuario1
;

parametros_crear::=
    parametro_usuario
    | parametro_contra
    | parametro_fecha 
;

bloque_usuario2::=
    parametros_modificarU bloque_usuario2P
    | error bloque_usuario2P {: imp("falla acá");:}
;

bloque_usuario2P::=
    | COMA bloque_usuario2
;

parametros_modificarU::=
    parametro_usuario_antiguo
    | parametro_usuario_nuevo
    | parametro_contra_nueva
    | parametro_fecha_modificacion
;

bloque_formulario1::=
    parametros_formulario bloque_formulario1P
    | error bloque_formulario1P {: imp("falla acá");:}
;

bloque_formulario1P::=
    | COMA bloque_formulario1
;
    
parametros_formulario::=
    parametro_id
    | parametro_titulo
    | parametro_nombre
    | parametro_tema
    | parametro_usuario_creacion
    | parametro_fecha
;

bloque_formulario2::=
    parametros_formulario2 bloque_formulario2P
    | error bloque_formulario2P
;

bloque_formulario2P::=
    | COMA bloque_formulario2
;   

parametros_formulario2::=
    parametro_id
    | parametro_titulo
    | parametro_nombre
    | parametro_tema
;

parametro_tema::=
    COMILLAS TEMAP COMILLAS DOSP COMILLAS TEMA:e1 COMILLAS                      {:agregarParametroAMap("TEMA",e1.toString());System.out.println("ingresado tema"); :}
;

parametro_login::=
    parametro_usuario COMA parametro_contra {:temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);:}
    | parametro_contra COMA parametro_usuario {:temporal.getCuantas().add(lista_temporal); lista_temporal = new HashMap<>(); temporal.setTieneErrores(false);:}
;

parametro_usuario::=
    COMILLAS USUARIOP COMILLAS DOSP COMILLAS USUARIO:e1 COMILLAS {:agregarParametroAMap("USUARIO",e1.toString()); logeado.setUsuario(e1.toString());:}
;

parametro_usuario_creacion::=
    COMILLAS USUARIOCP COMILLAS DOSP COMILLAS USUARIO:e1 COMILLAS              {:agregarParametroAMap("USUARIO_CREACION",e1.toString()); System.out.println("ingresado usuario creacion");:}
;

parametro_usuario_antiguo::=
    COMILLAS USUARIOAP COMILLAS DOSP COMILLAS USUARIO:e1 COMILLAS           {:agregarParametroAMap("USUARIO_ANTIGUO",e1.toString()); :}
;

parametro_usuario_nuevo::=
    COMILLAS USUARIONP COMILLAS DOSP COMILLAS USUARIO:e1 COMILLAS           {:agregarParametroAMap("USUARIO_NUEVO",e1.toString()); :}
;

parametro_contra::=
    COMILLAS CONTRAP COMILLAS DOSP COMILLAS tipo_palabra:e1 COMILLAS    {:agregarParametroAMap("CONTRA",e1.toString()); logeado.setPassword(e1.toString());:}
;

parametro_contra_nueva::=
    COMILLAS NUEVOP COMILLAS DOSP COMILLAS tipo_palabra:e1 COMILLAS     {:agregarParametroAMap("CONTRA_NUEVA",e1.toString());:}
;

parametro_fecha::=
    COMILLAS FECHACP COMILLAS DOSP COMILLAS FECHA:e1 COMILLAS {:agregarParametroAMap("FECHA",e1.toString());System.out.println("ingresado usuario creacion");:}
;

parametro_fecha_modificacion::=
    COMILLAS FECHAMP COMILLAS DOSP COMILLAS FECHA:e1 COMILLAS {:agregarParametroAMap("FECHA_MODIFICACION",e1.toString());:}
;

parametro_id::=
    COMILLAS IDP COMILLAS DOSP COMILLAS ID:e1 COMILLAS {:agregarParametroAMap("ID",e1.toString()); System.out.println("ingresado id");:}
;

parametro_titulo::=
    COMILLAS TITULOP COMILLAS DOSP COMILLAS tipo_opcion:e1 COMILLAS     {:agregarParametroAMap("TITULO",e1.toString()); System.out.println("ingresado titulo");:}
;

parametro_nombre::=
    COMILLAS NOMBREP COMILLAS DOSP COMILLAS USUARIO:e1 COMILLAS         {:agregarParametroAMap("NOMBRE",e1.toString()); System.out.println("ingresado nombre");:}
;

parametro_nombre_campo::=
    COMILLAS NOMBREC COMILLAS DOSP COMILLAS USUARIO:e1 COMILLAS         {:agregarParametroAMap("NOMBRE_CAMPO",e1.toString());:}
;

parametro_formulario::=
    COMILLAS FORMULARIOC COMILLAS DOSP COMILLAS ID:e1 COMILLAS             {:agregarParametroAMap("FORMULARIO",e1.toString());:}
;

tipos_de_clases::=
    CLASENORMAL:e1         {:RESULT = e1.toString();:}
    | CLASEAREA:e1         {:RESULT = e1.toString();:}
    | CLASEOPCIONES:e1     {:RESULT = e1.toString();:}
    | CLASEIMAGEN:e1       {:RESULT = e1.toString();:}
    | CLASEBOTON:e1        {:RESULT = e1.toString();:}
;

parametro_clase::=
    COMILLAS CLASE COMILLAS DOSP COMILLAS tipos_de_clases:e1 COMILLAS       {:agregarParametroAMap("CLASE",e1.toString());:}
;

parametro_indice::=
    COMILLAS INDICEC COMILLAS DOSP COMILLAS NUMERO:e1 COMILLAS              {:agregarParametroAMap("INDICE",e1.toString());:}
;

parametro_texto::=
    COMILLAS TEXTOVC COMILLAS DOSP COMILLAS tipo_opcion:e1 COMILLAS         {:agregarParametroAMap("TEXTO_VISIBLE",e1.toString());:}
;

parametro_alineacion::=
    COMILLAS ALINEAC COMILLAS DOSP COMILLAS ALINEA:e1 COMILLAS              {:agregarParametroAMap("ALINEACION",e1.toString());:}
;

parametro_requerido::=
    COMILLAS REQUERIDO COMILLAS DOSP COMILLAS BOOL:e1 COMILLAS              {:agregarParametroAMap("REQUERIDO",e1.toString());:}
;

parametro_opciones::=
    COMILLAS OPCIONES COMILLAS DOSP COMILLAS bloque_opciones COMILLAS       {:agregarParametroAMap("OPCIONES",armando); armando = "";:}
;

bloque_opciones::=
    bloque_opciones OR tipo_opcion:e1                                       {:armando += e1.toString()+"\n";:}
    | tipo_opcion:e1                                                        {:armando += e1.toString()+"\n";:}
;

tipo_opcion::=
    TITULO:e1       {:RESULT = e1.toString();:}
    | USUARIO:e1    {:RESULT = e1.toString();:}
    | ID:e1         {:RESULT = e1.toString();:}
    | NUMERO:e1     {:RESULT = e1.toString();:}
;

tipo_palabra::=
    USUARIO:e1 {:RESULT = e1.toString();:}
    | ID:e1 {:RESULT = e1.toString();:}
    | NUMERO:e1 {:RESULT = e1.toString();:}
;

parametro_filas::=
    COMILLAS FILAS COMILLAS DOSP COMILLAS NUMERO:e1 COMILLAS                {:agregarParametroAMap("FILAS",e1.toString());:}
;

parametro_columnas::=
    COMILLAS COLUMNAS COMILLAS DOSP COMILLAS NUMERO:e1 COMILLAS             {:agregarParametroAMap("COLUMNAS",e1.toString());:}
;

parametro_url::=
    COMILLAS URLC COMILLAS DOSP COMILLAS URL:e1 COMILLAS                    {:agregarParametroAMap("URL",e1.toString());:}
;

inicio_param_datos::=
    COMILLAS MAYORQ LLAVEA COMILLAS CONSULTASP COMILLAS DOSP CORCHETEA
;

bloque9::=
    LLAVEA bloque_consultas LLAVEC bloque9P
    | error bloque9P
;

bloque9P::=
    | COMA bloque9
;

bloque_consultas::=
    descripcion_consulta bloque_consultasP
    | error bloque_consultasP
;

bloque_consultasP::=
    | COMA bloque_consultas
;

descripcion_consulta::=
    COMILLAS NOCONSULTA:e1 COMILLAS DOSP COMILLAS SELECT DE campo:e2 CORCHETEA nombre_campos CORCHETEC restricciones COMILLAS {: cons_temp.setNoconsulta(e1.toString()); cons_temp.setForm(e2.toString()); lista_consultas.add(cons_temp); temporal.getConsulta().add(cons_temp); cons_temp = new Consulta(); :}
;

campo::=
    ID:e1           {:RESULT = e1.toString();:}
    | USUARIO:e1       {:RESULT = e1.toString();:}
;

nombre_campos::=
    | campos
;

campos::=
    campo:e1 camposP {: cons_temp.getCampos().add(e1.toString()); :}
    | error camposP
;

camposP::=
    | COMA campos
;

restricciones::=
    | WHERE CORCHETEA restriccion:e1 CORCHETEC   {: cons_temp.setRestricciones(e1); :}
;

restriccion::=
    restriccion:e1 AND restriccion:e2 {: ArrayList<Map<String,String>> para = new ArrayList<>(e1); Map<String,String> te = new HashMap<>(); te.put("OPLOGICO","AND"); para.add(te); para.addAll(e2); RESULT = para; :}
    | restriccion:e1 OROP restriccion:e2 {: ArrayList<Map<String,String>> para = new ArrayList<>(e1); Map<String,String> te = new HashMap<>(); te.put("OPLOGICO","OR"); para.add(te); para.addAll(e2); RESULT = para; :}
    | NOT restriccion:e1  {: ArrayList<Map<String,String>> para = e1; para.get(para.size()-1).put("NOT","true"); RESULT = para;:}
    %prec NOT
    | PARENTESISA restriccion PARENTESISC {: imp("condicional con parentesis"); :}
    | condicional:e2      {: ArrayList<Map<String,String>> para = new ArrayList<>(); para.add(e2); RESULT = para; :}
;

condicional::=
    campo:e1 tipo_condicion:e2             {: Map<String,String> para = e2; para.put("CAMPO",e1.toString());  RESULT = para;  :}
;

tipo_condicion::=
    condicion_numerica:e1 tipo_numero:e2    {: Map<String,String> para = e2; para.put("OPRELACIONAL",e1.toString());  RESULT = para;  :}
    | IGUAL:e1 tipo_dato:e2                 {: Map<String,String> para = e2; para.put("OPRELACIONAL",e1.toString());  RESULT = para;  :}
;

condicion_numerica::=
    MAYORIGUAL:e1                           {: RESULT = e1.toString(); :}
    | MENORIGUAL:e1                         {: RESULT = e1.toString(); :}
    | MAYORQ:e1                             {: RESULT = e1.toString(); :}
    | MENORQ:e1                             {: RESULT = e1.toString(); :}
;

tipo_numero::=
    NUMERO:e1               {: Map<String,String> para = new HashMap<>(); para.put("TIPO","NUMERO"); para.put("DATO",e1.toString()); RESULT = para;  :}
    | DEC:e1                {: Map<String,String> para = new HashMap<>(); para.put("TIPO","DECIMAL"); para.put("DATO",e1.toString()); RESULT = para;  :}
;

tipo_dato::=
    NUMERO:e1                               {: Map<String,String> para = new HashMap<>(); para.put("TIPO","NUMERO"); para.put("DATO",e1.toString()); RESULT = para; :}
    | APOSTROFE tipo_opcion:e1 APOSTROFE    {: Map<String,String> para = new HashMap<>(); para.put("TIPO","STRING"); para.put("DATO",e1.toString()); RESULT = para;  :}
    | DEC:e1                                {: Map<String,String> para = new HashMap<>(); para.put("TIPO","DECIMAL"); para.put("DATO",e1.toString()); RESULT = para;  :}
;