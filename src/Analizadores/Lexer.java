// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Analizadores/Lexer.flex

package Analizadores;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  3,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  5,  6,  7,  8,  7,  7,  0,  9, 10,  0,  0, 11, 12, 13, 14, 
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 18,  0, 19,  7, 
     0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
    35, 36, 37, 38, 39, 40, 41, 42, 43, 29, 29, 44,  0, 45,  0, 46, 
     0, 47, 48, 49, 50, 51, 52, 29, 53, 54, 29, 55, 56, 57, 58, 59, 
    60, 29, 61, 62, 63, 64, 29, 65, 29, 29, 29, 66, 67, 68,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\4\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\21\15\1\16\1\17\1\4\6\15\1\20\1\3\1\21"+
    "\1\22\1\1\1\23\1\3\1\10\1\24\1\15\1\0"+
    "\13\15\1\25\15\15\1\4\6\15\1\10\1\0\27\15"+
    "\1\26\10\15\1\10\1\0\2\15\1\27\21\15\1\30"+
    "\6\15\1\3\1\0\2\15\1\31\5\15\1\32\20\15"+
    "\1\3\1\0\10\15\1\33\2\15\1\34\6\15\1\35"+
    "\2\15\1\0\1\15\1\3\1\0\23\15\1\36\1\15"+
    "\1\0\1\15\1\37\1\40\2\15\1\41\13\15\1\42"+
    "\1\15\1\43\4\15\1\0\17\15\1\44\5\15\1\0"+
    "\2\15\1\45\7\15\1\46\56\15\1\47\13\15\1\50"+
    "\6\15\1\51\7\15\1\52\2\15\1\53\1\54\1\55"+
    "\5\15\1\56\5\15\1\57\22\15\1\60\1\15\1\61"+
    "\1\62\4\15\1\63\4\15\1\64\2\15\1\65\7\15"+
    "\1\66\2\15\1\67\3\15\1\70\5\15\1\71\1\72"+
    "\4\15\1\73\1\74\1\75\2\15\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u0114\0\u0114"+
    "\0\317\0\u019e\0\u01e3\0\u0228\0\317\0\317\0\u026d\0\317"+
    "\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495"+
    "\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd"+
    "\0\u0702\0\317\0\317\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\u08e5\0\317\0\u092a\0\317\0\317\0\u096f\0\u09b4"+
    "\0\u09f9\0\u0a3e\0\317\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97"+
    "\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf"+
    "\0\u0450\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2"+
    "\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca"+
    "\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2"+
    "\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a"+
    "\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842"+
    "\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u0450\0\u1a25"+
    "\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d"+
    "\0\u1c92\0\u1cd7\0\u1d1c\0\u0450\0\u1d61\0\u1da6\0\u1deb\0\u1e30"+
    "\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058"+
    "\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u0450\0\u21f6\0\u223b"+
    "\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463"+
    "\0\u0450\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u0450\0\u2601"+
    "\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829"+
    "\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51"+
    "\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79"+
    "\0\u2cbe\0\u0450\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u2ea1\0\u2ee6\0\u2f2b\0\u0450\0\u2f70\0\u2fb5\0\u2ffa\0\u303f"+
    "\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267"+
    "\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f"+
    "\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7"+
    "\0\u36fc\0\u3084\0\u3741\0\u3786\0\u37cb\0\u0450\0\u3810\0\u3855"+
    "\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d"+
    "\0\u3ac2\0\u0450\0\u3b07\0\u0450\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b"+
    "\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43"+
    "\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b"+
    "\0\u0450\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u4209\0\u424e"+
    "\0\u4293\0\u0450\0\u42d8\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431"+
    "\0\u4476\0\u0450\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614"+
    "\0\u4659\0\u469e\0\u46e3\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c"+
    "\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64"+
    "\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c"+
    "\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f\0\u4eb4"+
    "\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u5052\0\u5097\0\u50dc"+
    "\0\u0450\0\u5121\0\u5166\0\u51ab\0\u51f0\0\u5235\0\u527a\0\u52bf"+
    "\0\u5304\0\u5349\0\u538e\0\u53d3\0\u0450\0\u5418\0\u545d\0\u54a2"+
    "\0\u54e7\0\u552c\0\u5571\0\u0450\0\u55b6\0\u55fb\0\u5640\0\u5685"+
    "\0\u56ca\0\u570f\0\u5754\0\u0450\0\u5799\0\u57de\0\u0450\0\u5823"+
    "\0\u5868\0\u58ad\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u0450\0\u5a06"+
    "\0\u5a4b\0\u5a90\0\u5ad5\0\u5b1a\0\u0450\0\u5b5f\0\u5ba4\0\u5be9"+
    "\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42\0\u5d87\0\u5dcc\0\u5e11"+
    "\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a\0\u5faf\0\u5ff4\0\u0450"+
    "\0\u6039\0\u0450\0\u0450\0\u607e\0\u60c3\0\u6108\0\u614d\0\u0450"+
    "\0\u6192\0\u61d7\0\u621c\0\u6261\0\u0450\0\u62a6\0\u62eb\0\u0450"+
    "\0\u6330\0\u6375\0\u63ba\0\u63ff\0\u6444\0\u6489\0\u64ce\0\u0450"+
    "\0\u6513\0\u6558\0\u0450\0\u659d\0\u65e2\0\u6627\0\u0450\0\u666c"+
    "\0\u66b1\0\u66f6\0\u673b\0\u6780\0\u0450\0\u0450\0\u67c5\0\u680a"+
    "\0\u684f\0\u6894\0\u0450\0\u0450\0\u0450\0\u68d9\0\u691e\0\u0450"+
    "\0\u0450";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\0\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\27\1\30\2\27\1\31\1\32\1\33\1\34"+
    "\1\35\1\27\1\36\1\27\1\37\1\40\1\27\1\41"+
    "\1\27\1\42\1\43\1\44\1\27\1\45\1\27\1\46"+
    "\1\27\1\47\1\50\1\51\12\27\1\52\1\53\1\54"+
    "\1\55\1\0\2\2\1\0\1\2\76\0\1\2\24\0"+
    "\1\56\175\0\1\5\1\0\2\5\1\0\1\5\2\0"+
    "\1\5\4\0\30\5\2\0\24\5\1\0\1\5\11\0"+
    "\1\6\3\0\1\6\2\0\1\6\4\0\30\6\2\0"+
    "\24\6\12\0\1\5\1\6\2\5\1\0\1\12\2\0"+
    "\1\12\4\0\30\12\2\0\24\12\1\0\1\5\17\0"+
    "\1\57\72\0\1\60\2\0\1\61\1\0\2\61\1\0"+
    "\1\61\2\0\1\62\4\0\30\61\2\0\24\61\1\0"+
    "\1\61\6\0\1\63\103\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\6\27"+
    "\1\66\4\27\1\67\14\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\13\27\1\70\14\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\13\27"+
    "\1\71\2\27\1\72\2\27\1\73\6\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\1\74\27\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\13\27\1\75\14\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\4\27\1\76\3\27\1\77\5\27"+
    "\1\100\11\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\30\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\3\27\1\101\11\27\1\102\12\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\16\27\1\103\11\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\16\27\1\104\11\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\16\27\1\105"+
    "\5\27\1\106\3\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\17\27\1\107\10\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\1\110\27\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\4\27\1\111\23\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\4\27\1\112\3\27\1\113\17\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\21\27\1\114\1\115\5\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\7\27\1\116\20\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\6"+
    "\2\64\1\0\1\117\1\65\1\0\1\117\4\0\30\44"+
    "\2\0\24\44\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\30\27\2\0\12\27\1\120\11\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\30\27\2\0\1\27\1\121\22\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\30\27\2\0"+
    "\10\27\1\122\13\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\30\27\2\0\21\27\1\123\2\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\30\27\2\0\14\27\1\124"+
    "\7\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\30\27"+
    "\2\0\7\27\1\125\14\27\1\0\1\64\2\0\2\2"+
    "\1\0\1\2\2\0\1\5\1\0\2\5\1\0\1\5"+
    "\2\0\1\5\4\0\30\5\2\0\24\5\1\0\1\54"+
    "\1\0\2\57\2\0\101\57\4\0\1\60\2\0\1\60"+
    "\1\0\2\60\1\0\1\60\2\0\1\60\4\0\30\60"+
    "\2\0\24\60\1\0\1\60\5\0\1\60\2\0\1\61"+
    "\1\0\2\61\1\0\1\61\2\0\1\61\4\0\30\61"+
    "\2\0\24\61\1\0\1\61\5\0\1\60\2\0\1\61"+
    "\1\0\2\61\1\0\1\61\2\0\1\126\4\0\30\61"+
    "\2\0\24\61\1\0\1\61\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\2\0\1\64\4\0\30\64"+
    "\2\0\24\64\1\0\1\64\25\0\30\127\2\0\24\127"+
    "\7\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\21\27\1\130\6\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\10\27"+
    "\1\131\17\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\24\27\1\132\3\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\1\133\27\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\13\27"+
    "\1\134\14\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\4\27\1\135\23\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\21\27\1\136\6\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\10\27\1\137\17\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\2\27\1\140\25\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\13\27\1\141"+
    "\14\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\21\27\1\142\6\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\3\27\1\143\24\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\6\27"+
    "\1\144\21\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\3\27\1\145\24\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\14\27\1\146\13\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\4\27\1\147\23\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\2\27\1\150\25\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\21\27\1\151"+
    "\1\152\5\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\20\27\1\153\7\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\14\27\1\154\12\27"+
    "\1\155\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\23\27\1\156\4\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\13\27\1\157\14\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\24\27"+
    "\1\160\3\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\10\27\1\161\17\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\6\2\64\1\0"+
    "\1\117\2\0\1\117\4\0\30\117\2\0\24\117\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\30\27\2\0\22\27"+
    "\1\162\1\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\30\27\2\0\17\27\1\163\4\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\30\27\2\0\14\27\1\164\7\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\30\27\2\0"+
    "\21\27\1\165\2\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\30\27\2\0\10\27\1\166\13\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\30\27\2\0\10\27\1\167"+
    "\13\27\1\0\1\64\5\0\1\60\2\0\1\61\1\0"+
    "\2\61\1\0\1\61\2\0\1\170\4\0\30\61\2\0"+
    "\24\61\1\0\1\61\16\0\1\171\6\0\30\127\2\0"+
    "\24\127\7\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\4\27\1\172\23\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\15\27\1\173\12\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\4\27\1\174\23\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\22\27\1\175"+
    "\5\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\24\27\1\176\3\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\1\177\2\27\1\200\24\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\12\27\1\174\15\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\14\27\1\201\13\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\7\27\1\202"+
    "\20\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\1\203\27\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\14\27\1\204\13\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\10\27\1\205"+
    "\17\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\10\27\1\206\17\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\10\27\1\207\17\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\1\27"+
    "\1\210\26\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\25\27\1\211\2\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\10\27\1\212\17\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\1\213\27\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\22\27\1\214\5\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\24\27\1\215\3\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\1\216\27\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\23\27\1\217\4\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\24\27\1\220\3\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\1\221\27\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\23\27\1\132\4\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\30\27\2\0\5\27"+
    "\1\174\16\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\30\27\2\0\11\27\1\174\12\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\30\27\2\0\1\222\23\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\30\27\2\0\16\27"+
    "\1\223\5\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\30\27\2\0\1\224\23\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\30\27\2\0\21\27\1\162\2\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\61\1\0\2\61\1\0"+
    "\1\225\2\0\1\170\4\0\30\61\2\0\24\61\1\0"+
    "\1\61\62\0\1\226\27\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\6\27"+
    "\1\227\21\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\4\27\1\230\23\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\4\27\1\231\23\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\14\27\1\232\13\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\21\27\1\233\6\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\4\27\1\234"+
    "\23\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\10\27\1\235\17\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\1\236\27\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\22\27\1\237"+
    "\5\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\24\27\1\240\3\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\2\27\1\241\25\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\15\27"+
    "\1\242\12\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\5\27\1\243\22\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\21\27\1\244\6\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\16\27\1\245\11\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\16\27\1\246\11\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\14\27\1\247"+
    "\13\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\26\27\1\250\1\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\4\27\1\251\23\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\16\27"+
    "\1\252\11\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\13\27\1\253\14\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\21\27\1\254\6\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\30\27\2\0\20\27\1\255\3\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\30\27\2\0\20\27\1\256\3\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\30\27\2\0"+
    "\20\27\1\257\3\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\61\1\0\2\61\1\0\1\61\2\0\1\260\4\0"+
    "\30\61\2\0\24\61\1\0\1\61\74\0\1\261\15\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\1\262\27\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\1\263\27\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\15\27"+
    "\1\264\12\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\30\27\2\0\1\265\23\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\15\27\1\266\12\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\15\27"+
    "\1\267\12\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\30\27\2\0\1\270\23\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\13\27\1\271\14\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\4\27"+
    "\1\272\23\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\30\27\2\0\1\273\23\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\10\27\1\274\17\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\4\27"+
    "\1\275\23\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\30\27\2\0\1\276\23\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\15\27\1\277\12\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\4\27"+
    "\1\300\23\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\16\27\1\301\11\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\21\27\1\302\6\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\30\27\2\0\1\303\23\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\16\27\1\304\11\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\10\27\1\305\17\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\30\27\2\0\15\27\1\306\6\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\1\307\3\0\30\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\30\27\2\0\15\27"+
    "\1\310\6\27\1\0\1\64\5\0\1\60\2\0\1\61"+
    "\1\0\2\61\1\0\1\311\2\0\1\260\4\0\30\61"+
    "\2\0\24\61\1\0\1\61\72\0\1\312\17\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\21\27\1\313\6\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\2\27\1\314\25\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\1\315\27\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\24\27\1\316\3\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\2\27\1\317\25\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\1\320\27\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\2\27\1\321\11\27\1\322\13\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\1\323"+
    "\27\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\24\27\1\324\3\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\2\27\1\325\25\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\30\27"+
    "\2\0\1\326\23\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\5\27\1\327\11\27\1\330\10\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\4\27\1\331"+
    "\23\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\23\27\1\332\4\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\21\27\1\333\6\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\10\27"+
    "\1\334\17\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\25\27\1\335\2\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\16\27\1\336\11\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\30\27\2\0\12\27\1\337\11\27\1\0\1\64\17\0"+
    "\1\340\72\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\30\27\2\0\12\27"+
    "\1\341\11\27\1\0\1\64\5\0\1\60\2\0\1\61"+
    "\1\0\2\61\1\0\1\61\2\0\1\342\4\0\30\61"+
    "\2\0\24\61\1\0\1\61\17\0\1\343\72\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\30\27\2\0\1\344\23\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\10\27\1\345\17\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\22\27"+
    "\1\346\5\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\22\27\1\347\5\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\10\27\1\350\17\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\21\27\1\351\6\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\21\27\1\352\6\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\16\27\1\353"+
    "\11\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\21\27\1\354\6\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\22\27\1\355\5\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\1\356"+
    "\27\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\2\27\1\357\25\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\16\27\1\360\11\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\1\361"+
    "\27\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\22\27\1\362\5\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\21\27\1\363\6\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\3\27"+
    "\1\364\24\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\3\27\1\365\24\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\10\27\1\366\17\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\30\27\2\0\1\367\23\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\30\27\2\0\10\27\1\370\13\27\1\0"+
    "\1\64\17\0\1\371\72\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\30\27"+
    "\2\0\10\27\1\372\13\27\1\0\1\64\10\0\1\343"+
    "\1\0\2\343\1\0\1\343\1\0\2\343\4\0\30\343"+
    "\2\0\24\343\1\0\1\343\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\2\27\1\373\25\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\16\27\1\374\11\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\24\27\1\375"+
    "\3\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\1\376\27\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\30\27\2\0\1\377\23\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\4\27\1\u0100\23\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\3\27\1\u0101\24\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\10\27\1\u0102\17\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\24\27\1\u0103"+
    "\3\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\21\27\1\u0104\6\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\1\u0105\27\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\21\27\1\u0106"+
    "\6\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\22\27\1\u0107\5\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\16\27\1\u0108\11\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\16\27"+
    "\1\u0109\11\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\22\27\1\u010a\5\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\1\u010b\1\27\1\u010c"+
    "\12\27\1\u010d\12\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\30\27\2\0\3\27\1\u010e\20\27"+
    "\1\0\1\64\25\0\30\u010f\2\0\24\u010f\7\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\30\27\2\0\3\27\1\u0110\20\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\16\27\1\u0111\11\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\15\27\1\u0112\12\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\1\u0113\27\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\13\27\1\u0114\14\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\2\27\1\u0115\2\27\1\u0116\16\27\1\u0117\3\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\1\u0118"+
    "\27\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\10\27\1\u0119\17\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\16\27\1\u011a\11\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\1\u011b"+
    "\27\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\30\27\2\0\1\u011c\23\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\14\27\1\u011d\13\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\14\27\1\u011e"+
    "\13\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\22\27\1\u011f\5\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\22\27\1\u0120\5\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\10\27"+
    "\1\u0121\17\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\15\27\1\u0122\12\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\21\27\1\u0123\6\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\24\27\1\u0124\3\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\30\27\2\0\10\27\1\u0125\13\27"+
    "\1\0\1\64\16\0\1\65\6\0\30\u010f\2\0\24\u010f"+
    "\7\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\30\27\2\0\10\27\1\u0126"+
    "\13\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\14\27"+
    "\1\u0127\13\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\21\27\1\u0128\6\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\4\27\1\u0129\23\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\16\27\1\u012a\11\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\16\27\1\u012b\11\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\22\27\1\u012c"+
    "\5\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\2\27\1\u012d\25\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\5\27\1\u012e\22\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\21\27"+
    "\1\u012f\6\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\2\27\1\u0130\2\27\1\u0131\16\27\1\u0132"+
    "\3\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\17\27\1\u0133\10\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\24\27\1\u0134\3\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\26\27"+
    "\1\u0135\1\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\30\27\2\0\1\u0136\23\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\1\27\1\u0137\26\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\23\27"+
    "\1\u0138\4\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\4\27\1\u0139\23\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\4\27\1\u013a\23\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\30\27\2\0\21\27\1\u013b\2\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\30\27\2\0\21\27\1\u013c\2\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\17\27\1\u013d"+
    "\10\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\10\27\1\u013e\17\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\22\27\1\u013f\5\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\14\27"+
    "\1\u0140\13\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\21\27\1\u0141\6\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\24\27\1\u0142\3\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\10\27\1\u0143\17\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\10\27\1\u0144\17\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\10\27\1\u0145"+
    "\17\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\16\27\1\u0146\11\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\16\27\1\u0147\11\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\22\27"+
    "\1\u0148\5\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\16\27\1\u0149\11\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\13\27\1\u014a\14\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\16\27\1\u014b\11\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\2\27\1\u014c\2\27\1\u014d\22\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\13\27\1\u014e\14\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\10\27\1\u014f\17\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\1\u0150\27\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\25\27\1\u0151\2\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\30\27\2\0\22\27\1\u0152\1\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\30\27\2\0"+
    "\22\27\1\u0153\1\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\16\27\1\u0154\11\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\16\27\1\u0155\11\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\30\27"+
    "\2\0\1\u0156\23\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\17\27\1\u0157\10\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\14\27\1\u0158\13\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\1\u0159"+
    "\27\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\16\27\1\u015a\11\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\2\27\1\u015b\25\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\16\27"+
    "\1\u015c\11\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\14\27\1\u015d\13\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\21\27\1\u015e\6\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\24\27\1\u015f\3\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\1\u0160\27\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\21\27\1\u0161\6\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\16\27\1\u0162\11\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\16\27\1\u0163\11\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\4\27\1\u0164"+
    "\23\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\6\27\1\u0165\21\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\2\27\1\u0166\25\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\16\27"+
    "\1\u0167\11\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\30\27\2\0\4\27\1\u0168\17\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\30\27\2\0\4\27"+
    "\1\u0169\17\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\15\27\1\u016a\12\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\24\27\1\u016b\3\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\16\27\1\u016c"+
    "\11\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\24\27\1\u016d\3\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\21\27\1\u016e\6\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\15\27"+
    "\1\u016f\12\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\1\u0170\27\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\17\27\1\u0171\10\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\14\27"+
    "\1\u0172\13\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\1\u0173\27\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\21\27\1\u0174\6\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\3\27"+
    "\1\u0175\24\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\14\27\1\u0176\13\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\21\27\1\u0177\6\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\24\27\1\u0178\3\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\10\27\1\u0179\17\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\30\27\2\0"+
    "\5\27\1\u017a\16\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\30\27\2\0\5\27\1\u017b\16\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\4\27\1\u017c\23\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\22\27"+
    "\1\u017d\5\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\15\27\1\u017e\12\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\13\27\1\u017f\14\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\10\27\1\u0180\17\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\2\27\1\u0181\25\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\16\27\1\u0182"+
    "\11\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\24\27\1\u0183\3\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\21\27\1\u0184\6\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\10\27"+
    "\1\u0185\17\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\17\27\1\u0186\10\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\14\27\1\u0187\13\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\16\27\1\u0188\11\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\16\27\1\u0189\11\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\30\27\2\0"+
    "\20\27\1\u018a\3\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\30\27\2\0\20\27\1\u018b\3\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\15\27\1\u018c\12\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\24\27"+
    "\1\u018d\3\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\4\27\1\u018e\23\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\1\u018f\27\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\16\27"+
    "\1\u0190\11\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\10\27\1\u0191\17\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\15\27\1\u0192\12\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\13\27\1\u0193\14\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\10\27\1\u0194\17\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\16\27\1\u0195"+
    "\11\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\16\27\1\u0196\11\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\24\27\1\u0197\3\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\15\27"+
    "\1\u0198\12\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\23\27\1\u0199\4\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\1\u019a\27\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\15\27"+
    "\1\u019b\12\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\21\27\1\u019c\6\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\16\27\1\u019d\11\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\4\27\1\u019e\23\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\1\u019f\27\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\16\27\1\u01a0\11\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\15\27\1\u01a1\12\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\13\27\1\u01a2\14\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\4\27\1\u01a3"+
    "\23\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\21\27\1\u01a4\6\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\23\27\1\u01a5\4\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\10\27"+
    "\1\u01a6\17\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\15\27\1\u01a7\12\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\15\27\1\u01a8\12\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\21\27\1\u01a9\6\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\4\27\1\u01aa\23\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\1\u01ab\27\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\10\27\1\u01ac\17\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\4\27\1\u01ad\23\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\16\27\1\u01ae"+
    "\11\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\23\27\1\u01af\4\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\10\27\1\u01b0\17\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\15\27"+
    "\1\u01b1\12\27\2\0\24\27\1\0\1\64\5\0\1\60"+
    "\2\0\1\64\1\0\2\64\1\0\1\64\1\65\1\0"+
    "\1\64\4\0\21\27\1\u01b2\6\27\2\0\24\27\1\0"+
    "\1\64\5\0\1\60\2\0\1\64\1\0\2\64\1\0"+
    "\1\64\1\65\1\0\1\64\4\0\16\27\1\u01b3\11\27"+
    "\2\0\24\27\1\0\1\64\5\0\1\60\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\1\65\1\0\1\64\4\0"+
    "\4\27\1\u01b4\23\27\2\0\24\27\1\0\1\64\5\0"+
    "\1\60\2\0\1\64\1\0\2\64\1\0\1\64\1\65"+
    "\1\0\1\64\4\0\16\27\1\u01b5\11\27\2\0\24\27"+
    "\1\0\1\64\5\0\1\60\2\0\1\64\1\0\2\64"+
    "\1\0\1\64\1\65\1\0\1\64\4\0\23\27\1\u01b6"+
    "\4\27\2\0\24\27\1\0\1\64\5\0\1\60\2\0"+
    "\1\64\1\0\2\64\1\0\1\64\1\65\1\0\1\64"+
    "\4\0\10\27\1\u01b7\17\27\2\0\24\27\1\0\1\64"+
    "\5\0\1\60\2\0\1\64\1\0\2\64\1\0\1\64"+
    "\1\65\1\0\1\64\4\0\4\27\1\u01b8\23\27\2\0"+
    "\24\27\1\0\1\64\5\0\1\60\2\0\1\64\1\0"+
    "\2\64\1\0\1\64\1\65\1\0\1\64\4\0\16\27"+
    "\1\u01b9\11\27\2\0\24\27\1\0\1\64\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26979];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\4\1\1\11\1\1\1\0"+
    "\1\1\2\11\1\1\1\11\21\1\2\11\7\1\1\11"+
    "\1\1\2\11\4\1\1\11\1\1\1\0\41\1\1\0"+
    "\41\1\1\0\34\1\1\0\32\1\1\0\25\1\1\0"+
    "\2\1\1\0\25\1\1\0\30\1\1\0\25\1\1\0"+
    "\252\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignore*/
            }
            // fall through
          case 64: break;
          case 2:
            { return new Symbol(sym.COMILLAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 65: break;
          case 3:
            { return new Symbol(sym.Contra,yycolumn,yyline,yytext());
            }
            // fall through
          case 66: break;
          case 4:
            { return new Symbol(sym.ID,yycolumn,yyline,yytext());
            }
            // fall through
          case 67: break;
          case 5:
            { return new Symbol(sym.Parentesis_a, yycolumn, yyline, yytext());
            }
            // fall through
          case 68: break;
          case 6:
            { return new Symbol(sym.Parentesis_c, yycolumn, yyline, yytext());
            }
            // fall through
          case 69: break;
          case 7:
            { return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 70: break;
          case 8:
            { return new Symbol(sym.Numero, yycolumn, yyline, yytext());
            }
            // fall through
          case 71: break;
          case 9:
            { return new Symbol(sym.DOSP, yycolumn, yyline, yytext());
            }
            // fall through
          case 72: break;
          case 10:
            { return new Symbol(sym.P_coma, yycolumn, yyline, yytext());
            }
            // fall through
          case 73: break;
          case 11:
            { return new Symbol(sym.MENORQ,yycolumn,yyline,yytext());
            }
            // fall through
          case 74: break;
          case 12:
            { return new Symbol(sym.MAYORQ,yycolumn,yyline,yytext());
            }
            // fall through
          case 75: break;
          case 13:
            { return new Symbol(sym.USUARIO,yycolumn,yyline,yytext());
            }
            // fall through
          case 76: break;
          case 14:
            { return new Symbol(sym.CORCHETEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 77: break;
          case 15:
            { return new Symbol(sym.CORCHETEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 78: break;
          case 16:
            { return new Symbol(sym.LLAVEA, yycolumn, yyline, yytext());
            }
            // fall through
          case 79: break;
          case 17:
            { return new Symbol(sym.LLAVEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 80: break;
          case 18:
            { return new Symbol(sym.FINE,yycolumn,yyline,yytext());
            }
            // fall through
          case 81: break;
          case 19:
            { return new Symbol(sym.TITULO, yycolumn, yyline, yytext());
            }
            // fall through
          case 82: break;
          case 20:
            { return new Symbol(sym.INICIOE,yycolumn,yyline,yytext());
            }
            // fall through
          case 83: break;
          case 21:
            { return new Symbol(sym.IDP,yycolumn,yyline,yytext());
            }
            // fall through
          case 84: break;
          case 22:
            { return new Symbol(sym.URLC,yycolumn,yyline,yytext());
            }
            // fall through
          case 85: break;
          case 23:
            { return new Symbol(sym.TEMA,yycolumn,yyline,yytext());
            }
            // fall through
          case 86: break;
          case 24:
            { return new Symbol(sym.TEMAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 87: break;
          case 25:
            { return new Symbol(sym.CLASE,yycolumn,yyline,yytext());
            }
            // fall through
          case 88: break;
          case 26:
            { return new Symbol(sym.FILAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 89: break;
          case 27:
            { return new Symbol(sym.INDICEC,yycolumn,yyline,yytext());
            }
            // fall through
          case 90: break;
          case 28:
            { return new Symbol(sym.NOMBREP,yycolumn,yyline,yytext());
            }
            // fall through
          case 91: break;
          case 29:
            { return new Symbol(sym.TITULOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 92: break;
          case 30:
            { return new Symbol(sym.USUARIOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 93: break;
          case 31:
            { return new Symbol(sym.FECHA,yycolumn,yyline,yytext());
            }
            // fall through
          case 94: break;
          case 32:
            { return new Symbol(sym.URL, yycolumn,yyline,yytext());
            }
            // fall through
          case 95: break;
          case 33:
            { return new Symbol(sym.COLUMNAS,yycolumn,yyline,yytext());
            }
            // fall through
          case 96: break;
          case 34:
            { return new Symbol(sym.OPCIONES,yycolumn,yyline,yytext());
            }
            // fall through
          case 97: break;
          case 35:
            { return new Symbol(sym.CONTRAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 98: break;
          case 36:
            { return new Symbol(sym.REQUERIDO,yycolumn,yyline,yytext());
            }
            // fall through
          case 99: break;
          case 37:
            { return new Symbol(sym.ALINEAC,yycolumn,yyline,yytext());
            }
            // fall through
          case 100: break;
          case 38:
            { return new Symbol(sym.FORMULARIOC,yycolumn,yyline,yytext());
            }
            // fall through
          case 101: break;
          case 39:
            { return new Symbol(sym.NOMBREC,yycolumn,yyline,yytext());
            }
            // fall through
          case 102: break;
          case 40:
            { return new Symbol(sym.CREARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 103: break;
          case 41:
            { return new Symbol(sym.LOGINU,yycolumn,yyline,yytext());
            }
            // fall through
          case 104: break;
          case 42:
            { return new Symbol(sym.TEXTOVC,yycolumn,yyline,yytext());
            }
            // fall through
          case 105: break;
          case 43:
            { return new Symbol(sym.USUARIONP,yycolumn,yyline,yytext());
            }
            // fall through
          case 106: break;
          case 44:
            { return new Symbol(sym.FINS,yycolumn,yyline,yytext());
            }
            // fall through
          case 107: break;
          case 45:
            { return new Symbol(sym.INICIOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 108: break;
          case 46:
            { return new Symbol(sym.FECHACP,yycolumn,yyline,yytext());
            }
            // fall through
          case 109: break;
          case 47:
            { return new Symbol(sym.NUEVOP,yycolumn,yyline,yytext());
            }
            // fall through
          case 110: break;
          case 48:
            { return new Symbol(sym.USUARIOAP,yycolumn,yyline,yytext());
            }
            // fall through
          case 111: break;
          case 49:
            { return new Symbol(sym.FINSOLICITUDES, yycolumn, yyline, yytext());
            }
            // fall through
          case 112: break;
          case 50:
            { return new Symbol(sym.SOLICITUDESP, yycolumn, yyline, yytext());
            }
            // fall through
          case 113: break;
          case 51:
            { return new Symbol(sym.ELIMINARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 114: break;
          case 52:
            { return new Symbol(sym.NUEVOFP,yycolumn,yyline,yytext());
            }
            // fall through
          case 115: break;
          case 53:
            { return new Symbol(sym.USUARIOCP,yycolumn,yyline,yytext());
            }
            // fall through
          case 116: break;
          case 54:
            { return new Symbol(sym.MODIFICARU,yycolumn,yyline,yytext());
            }
            // fall through
          case 117: break;
          case 55:
            { return new Symbol(sym.AGREGARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 118: break;
          case 56:
            { return new Symbol(sym.FECHAMP,yycolumn,yyline,yytext());
            }
            // fall through
          case 119: break;
          case 57:
            { return new Symbol(sym.ELIMINARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 120: break;
          case 58:
            { return new Symbol(sym.ELIMINARF,yycolumn,yyline,yytext());
            }
            // fall through
          case 121: break;
          case 59:
            { return new Symbol(sym.CREDENCIALES,yycolumn,yyline,yytext());
            }
            // fall through
          case 122: break;
          case 60:
            { return new Symbol(sym.MODIFICARC,yycolumn,yyline,yytext());
            }
            // fall through
          case 123: break;
          case 61:
            { return new Symbol(sym.MODIFICARF,yycolumn,yyline,yytext());
            }
            // fall through
          case 124: break;
          case 62:
            { return new Symbol(sym.PARAMC,yycolumn,yyline,yytext());
            }
            // fall through
          case 125: break;
          case 63:
            { return new Symbol(sym.PARAMF,yycolumn,yyline,yytext());
            }
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
