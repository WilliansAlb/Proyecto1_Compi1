
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserALM extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symALM.class;
}

  /** Default constructor. */
  @Deprecated
  public parserALM() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserALM(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserALM(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\006\000\002\002" +
    "\006\000\002\003\007\000\002\003\005\000\002\004\007" +
    "\000\002\004\005\000\002\044\007\000\002\045\011\000" +
    "\002\046\011\000\002\005\021\000\002\006\011\000\002" +
    "\012\011\000\002\013\011\000\002\007\011\000\002\010" +
    "\011\000\002\011\011\000\002\014\011\000\002\017\007" +
    "\000\002\017\005\000\002\047\005\000\002\047\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\020\011\000\002\021\011\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\022\011\000\002\023\011\000" +
    "\002\024\011\000\002\025\011\000\002\027\011\000\002" +
    "\026\011\000\002\042\005\000\002\042\003\000\002\030" +
    "\011\000\002\031\011\000\002\032\011\000\002\015\011" +
    "\000\002\036\002\000\002\036\007\000\002\036\005\000" +
    "\002\037\013\000\002\043\005\000\002\043\003\000\002" +
    "\040\011\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\006\055\005\056\004\001\002\000\004\013" +
    "\336\001\002\000\004\013\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\026\011\001" +
    "\002\000\004\004\017\001\002\000\006\014\014\032\013" +
    "\001\002\000\004\026\015\001\002\000\004\002\000\001" +
    "\002\000\004\004\017\001\002\000\004\027\333\001\002" +
    "\000\004\017\325\001\002\000\004\032\021\001\002\000" +
    "\004\004\023\001\002\000\004\032\035\001\002\000\004" +
    "\021\024\001\002\000\004\004\025\001\002\000\004\005" +
    "\026\001\002\000\004\004\027\001\002\000\010\007\031" +
    "\015\032\033\030\001\002\000\006\004\uffde\012\uffde\001" +
    "\002\000\006\004\uffe0\012\uffe0\001\002\000\006\004\uffdf" +
    "\012\uffdf\001\002\000\004\004\034\001\002\000\004\032" +
    "\ufff3\001\002\000\004\004\037\001\002\000\004\032\051" +
    "\001\002\000\004\022\040\001\002\000\004\004\041\001" +
    "\002\000\004\005\042\001\002\000\004\004\043\001\002" +
    "\000\010\015\047\031\045\033\044\001\002\000\004\004" +
    "\uffdc\001\002\000\004\004\uffdb\001\002\000\004\004\050" +
    "\001\002\000\004\004\uffdd\001\002\000\004\032\ufff2\001" +
    "\002\000\004\004\053\001\002\000\004\032\062\001\002" +
    "\000\004\023\054\001\002\000\004\004\055\001\002\000" +
    "\004\005\056\001\002\000\004\004\057\001\002\000\004" +
    "\025\060\001\002\000\004\004\061\001\002\000\004\032" +
    "\ufff1\001\002\000\004\004\064\001\002\000\004\032\073" +
    "\001\002\000\004\024\065\001\002\000\004\004\066\001" +
    "\002\000\004\005\067\001\002\000\004\004\070\001\002" +
    "\000\004\015\071\001\002\000\004\004\072\001\002\000" +
    "\004\032\ufff5\001\002\000\004\004\075\001\002\000\004" +
    "\032\104\001\002\000\004\006\076\001\002\000\004\004" +
    "\077\001\002\000\004\005\100\001\002\000\004\004\101" +
    "\001\002\000\004\016\102\001\002\000\004\004\103\001" +
    "\002\000\006\027\ufff4\032\ufff4\001\002\000\004\004\105" +
    "\001\002\000\004\057\157\001\002\000\004\032\107\001" +
    "\002\000\004\004\111\001\002\000\004\027\ufff7\001\002" +
    "\000\004\060\112\001\002\000\004\004\113\001\002\000" +
    "\004\005\114\001\002\000\004\013\115\001\002\000\010" +
    "\014\uffc7\026\116\032\uffc7\001\002\000\004\004\124\001" +
    "\002\000\006\014\121\032\120\001\002\000\004\026\122" +
    "\001\002\000\004\027\uffc8\001\002\000\004\004\124\001" +
    "\002\000\004\027\154\001\002\000\004\030\125\001\002" +
    "\000\004\004\126\001\002\000\004\005\127\001\002\000" +
    "\004\004\130\001\002\000\010\015\047\031\045\033\044" +
    "\001\002\000\004\004\132\001\002\000\004\032\133\001" +
    "\002\000\004\004\136\001\002\000\006\027\uffc2\032\uffc2" +
    "\001\002\000\006\027\uffc4\032\152\001\002\000\004\061" +
    "\137\001\002\000\004\004\140\001\002\000\004\005\141" +
    "\001\002\000\004\004\142\001\002\000\014\007\145\015" +
    "\147\016\146\031\143\033\144\001\002\000\004\004\uffbc" +
    "\001\002\000\004\004\uffc0\001\002\000\004\004\uffbe\001" +
    "\002\000\004\004\uffbd\001\002\000\004\004\uffbf\001\002" +
    "\000\004\004\151\001\002\000\006\027\uffc1\032\uffc1\001" +
    "\002\000\004\004\136\001\002\000\006\027\uffc3\032\uffc3" +
    "\001\002\000\006\014\uffc6\032\uffc6\001\002\000\004\027" +
    "\156\001\002\000\006\014\uffc5\032\uffc5\001\002\000\004" +
    "\004\160\001\002\000\004\005\161\001\002\000\004\013" +
    "\162\001\002\000\004\026\164\001\002\000\006\014\321" +
    "\032\320\001\002\000\004\004\173\001\002\000\006\027" +
    "\uffeb\032\uffeb\001\002\000\006\027\uffe9\032\uffe9\001\002" +
    "\000\006\027\uffea\032\uffea\001\002\000\006\027\uffec\032" +
    "\uffec\001\002\000\006\027\316\032\315\001\002\000\006" +
    "\027\uffe8\032\uffe8\001\002\000\030\020\207\030\214\035" +
    "\215\036\206\037\212\040\204\041\211\042\205\043\203" +
    "\046\213\047\210\001\002\000\006\027\uffe5\032\uffe5\001" +
    "\002\000\006\027\uffe7\032\uffe7\001\002\000\006\027\uffe3" +
    "\032\uffe3\001\002\000\006\027\uffe6\032\uffe6\001\002\000" +
    "\006\027\uffe4\032\uffe4\001\002\000\006\027\uffe1\032\uffe1" +
    "\001\002\000\006\027\uffe2\032\uffe2\001\002\000\004\004" +
    "\310\001\002\000\004\004\303\001\002\000\004\004\273" +
    "\001\002\000\004\004\266\001\002\000\004\004\261\001" +
    "\002\000\004\004\254\001\002\000\004\004\247\001\002" +
    "\000\004\004\242\001\002\000\004\004\235\001\002\000" +
    "\004\004\230\001\002\000\004\004\216\001\002\000\004" +
    "\005\217\001\002\000\004\004\220\001\002\000\014\050" +
    "\224\051\222\052\225\053\221\054\223\001\002\000\004" +
    "\004\uffd5\001\002\000\004\004\uffd7\001\002\000\004\004" +
    "\uffd4\001\002\000\004\004\uffd8\001\002\000\004\004\uffd6" +
    "\001\002\000\004\004\227\001\002\000\006\027\uffd3\032" +
    "\uffd3\001\002\000\004\005\231\001\002\000\004\004\232" +
    "\001\002\000\004\015\233\001\002\000\004\004\234\001" +
    "\002\000\006\027\uffd9\032\uffd9\001\002\000\004\005\236" +
    "\001\002\000\004\004\237\001\002\000\004\031\240\001" +
    "\002\000\004\004\241\001\002\000\006\027\uffca\032\uffca" +
    "\001\002\000\004\005\243\001\002\000\004\004\244\001" +
    "\002\000\004\007\245\001\002\000\004\004\246\001\002" +
    "\000\006\027\uffd1\032\uffd1\001\002\000\004\005\250\001" +
    "\002\000\004\004\251\001\002\000\004\011\252\001\002" +
    "\000\004\004\253\001\002\000\006\027\uffcf\032\uffcf\001" +
    "\002\000\004\005\255\001\002\000\004\004\256\001\002" +
    "\000\004\034\257\001\002\000\004\004\260\001\002\000" +
    "\006\027\uffc9\032\uffc9\001\002\000\004\005\262\001\002" +
    "\000\004\004\263\001\002\000\004\033\264\001\002\000" +
    "\004\004\265\001\002\000\006\027\uffda\032\uffda\001\002" +
    "\000\004\005\267\001\002\000\004\004\270\001\002\000" +
    "\004\031\271\001\002\000\004\004\272\001\002\000\006" +
    "\027\uffd2\032\uffd2\001\002\000\004\005\274\001\002\000" +
    "\004\004\275\001\002\000\010\007\031\015\032\033\030" +
    "\001\002\000\006\004\301\012\300\001\002\000\006\004" +
    "\uffcc\012\uffcc\001\002\000\010\007\031\015\032\033\030" +
    "\001\002\000\006\027\uffce\032\uffce\001\002\000\006\004" +
    "\uffcd\012\uffcd\001\002\000\004\005\304\001\002\000\004" +
    "\004\305\001\002\000\004\010\306\001\002\000\004\004" +
    "\307\001\002\000\006\027\uffd0\032\uffd0\001\002\000\004" +
    "\005\311\001\002\000\004\004\312\001\002\000\004\031" +
    "\313\001\002\000\004\004\314\001\002\000\006\027\uffcb" +
    "\032\uffcb\001\002\000\004\004\173\001\002\000\006\014" +
    "\uffee\032\uffee\001\002\000\006\027\uffed\032\uffed\001\002" +
    "\000\004\026\322\001\002\000\004\032\ufff0\001\002\000" +
    "\004\004\173\001\002\000\006\027\324\032\315\001\002" +
    "\000\006\014\uffef\032\uffef\001\002\000\004\004\326\001" +
    "\002\000\004\005\327\001\002\000\004\004\330\001\002" +
    "\000\004\033\331\001\002\000\004\004\332\001\002\000" +
    "\004\032\ufff6\001\002\000\006\014\ufffe\032\ufffe\001\002" +
    "\000\004\027\335\001\002\000\006\014\ufffd\032\ufffd\001" +
    "\002\000\004\026\337\001\002\000\004\004\345\001\002" +
    "\000\006\014\342\032\341\001\002\000\004\026\343\001" +
    "\002\000\004\002\uffff\001\002\000\004\004\345\001\002" +
    "\000\004\032\356\001\002\000\004\044\350\001\002\000" +
    "\004\027\347\001\002\000\006\014\ufffc\032\ufffc\001\002" +
    "\000\004\004\351\001\002\000\004\005\352\001\002\000" +
    "\004\004\353\001\002\000\004\015\354\001\002\000\004" +
    "\004\355\001\002\000\004\032\ufff9\001\002\000\004\004" +
    "\360\001\002\000\004\032\367\001\002\000\004\045\361" +
    "\001\002\000\004\004\362\001\002\000\004\005\363\001" +
    "\002\000\004\004\364\001\002\000\010\015\047\031\045" +
    "\033\044\001\002\000\004\004\366\001\002\000\004\032" +
    "\ufff8\001\002\000\004\004\075\001\002\000\004\027\ufffa" +
    "\001\002\000\004\027\372\001\002\000\006\014\ufffb\032" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\006\005\333\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\015\006\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\116\001\001\000\004\037\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\133\043\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\162\001\001\000\002\001\001\000\034\016\167\020" +
    "\164\021\166\022\165\023\171\024\174\025\176\026\173" +
    "\027\177\030\175\031\201\032\200\047\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\276\042\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\016\316\020" +
    "\164\021\166\022\165\023\171\024\174\025\176\026\173" +
    "\027\177\030\175\031\201\032\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\016\167\020\164\021\166\022\165\023\171\024" +
    "\174\025\176\026\173\027\177\030\175\031\201\032\200" +
    "\047\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\337" +
    "\001\001\000\006\044\370\045\343\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\345" +
    "\045\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\356\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserALM$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserALM$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserALM$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol sym;

    public Symbol getS(){
        return this.sym;
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println(symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Linea: "+cur_token.right+" Columna: "+cur_token.left+" Valor:"+cur_token.value);
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserALM$actions {
  private final parserALM parser;

  /** Constructor */
  CUP$parserALM$actions(parserALM parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserALM$do_action_part00000000(
    int                        CUP$parserALM$act_num,
    java_cup.runtime.lr_parser CUP$parserALM$parser,
    java.util.Stack            CUP$parserALM$stack,
    int                        CUP$parserALM$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserALM$result;

      /* select the action based on the action number */
      switch (CUP$parserALM$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)).value;
		RESULT = start_val;
              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-1)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserALM$parser.done_parsing();
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIOFORM PARENTESISA bloque_forms PARENTESISC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIOUSUARIOS PARENTESISA bloque_usuarios PARENTESISC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-3)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_forms ::= bloque_forms COMA LLAVEA parametros_form LLAVEC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_forms",1, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_forms ::= LLAVEA parametros_form LLAVEC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_forms",1, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque_usuarios ::= bloque_usuarios COMA LLAVEA parametros_usuarios LLAVEC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_usuarios",2, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloque_usuarios ::= LLAVEA parametros_usuarios LLAVEC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_usuarios",2, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros_usuarios ::= parametro_usuario COMA parametro_password COMA parametro_fecha_creacion 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_usuarios",34, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametro_usuario ::= COMILLAS USUARIOP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_usuario",35, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametro_password ::= COMILLAS CONTRAP COMILLAS DOSP COMILLAS tipo_junto COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_password",36, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros_form ::= parametro_id COMA parametro_titulo COMA parametro_nombre COMA parametro_tema COMA parametro_user_creacion COMA parametro_fecha_creacion COMA grupo_componentes COMA grupo_datos 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_form",3, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-14)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametro_id ::= COMILLAS IDF COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_id",4, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametro_user_creacion ::= COMILLAS USUARIOCP COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_user_creacion",8, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametro_fecha_creacion ::= COMILLAS FECHACP COMILLAS DOSP COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_fecha_creacion",9, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametro_titulo ::= COMILLAS TITULOP COMILLAS DOSP COMILLAS tipo_string COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_titulo",5, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro_nombre ::= COMILLAS NOMBREP COMILLAS DOSP COMILLAS tipo_junto COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_nombre",6, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro_tema ::= COMILLAS TEMAP COMILLAS DOSP COMILLAS TEMA COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_tema",7, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // grupo_componentes ::= COMILLAS COMPS COMILLAS DOSP PARENTESISA bloque_componentes PARENTESISC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("grupo_componentes",10, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque_componentes ::= bloque_componentes COMA LLAVEA bloque_param_compo LLAVEC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_componentes",13, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_componentes ::= LLAVEA bloque_param_compo LLAVEC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_componentes",13, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_param_compo ::= bloque_param_compo COMA parametros_componentes 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_param_compo",37, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_param_compo ::= parametros_componentes 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_param_compo",37, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros_componentes ::= parametro_id_componente 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros_componentes ::= parametro_nombre_campo 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros_componentes ::= parametro_clase 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros_componentes ::= parametro_indice 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros_componentes ::= parametro_texto 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_componentes ::= parametro_alineacion 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_componentes ::= parametro_opciones 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_componentes ::= parametro_requerido 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_componentes ::= parametro_filas 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_componentes ::= parametro_columnas 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros_componentes ::= parametro_url 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_componentes",12, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_string ::= TITULO 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_string",26, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_string ::= USUARIO 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_string",26, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_string ::= ID 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_string",26, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_junto ::= USUARIO 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_junto",27, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_junto ::= ID 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_junto",27, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_junto ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_junto",27, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametro_id_componente ::= COMILLAS IDC COMILLAS DOSP COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_id_componente",14, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametro_nombre_campo ::= COMILLAS NOMBREC COMILLAS DOSP COMILLAS USUARIO COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_nombre_campo",15, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipos_de_clases ::= CLASENORMAL 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",25, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipos_de_clases ::= CLASEAREA 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",25, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipos_de_clases ::= CLASEOPCIONES 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",25, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipos_de_clases ::= CLASEIMAGEN 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",25, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipos_de_clases ::= CLASEBOTON 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipos_de_clases",25, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro_clase ::= COMILLAS CLASE COMILLAS DOSP COMILLAS tipos_de_clases COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_clase",16, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro_indice ::= COMILLAS INDICEC COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_indice",17, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro_texto ::= COMILLAS TEXTOVC COMILLAS DOSP COMILLAS TITULO COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_texto",18, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro_alineacion ::= COMILLAS ALINEAC COMILLAS DOSP COMILLAS ALINEA COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_alineacion",19, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro_requerido ::= COMILLAS REQUERIDO COMILLAS DOSP COMILLAS BOOL COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_requerido",21, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro_opciones ::= COMILLAS OPCIONES COMILLAS DOSP COMILLAS bloque_opciones COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_opciones",20, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque_opciones ::= bloque_opciones OR tipo_string 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_opciones",32, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque_opciones ::= tipo_string 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_opciones",32, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametro_filas ::= COMILLAS FILAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_filas",22, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametro_columnas ::= COMILLAS COLUMNAS COMILLAS DOSP COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_columnas",23, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametro_url ::= COMILLAS URLC COMILLAS DOSP COMILLAS URL COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_url",24, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // grupo_datos ::= COMILLAS DATOS COMILLAS DOSP PARENTESISA bloque_datos PARENTESISC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("grupo_datos",11, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloque_datos ::= 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_datos",28, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloque_datos ::= bloque_datos COMA LLAVEA parametros_datos LLAVEC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_datos",28, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-4)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque_datos ::= LLAVEA parametros_datos LLAVEC 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_datos",28, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_datos ::= COMILLAS NOMBREC COMILLAS DOSP COMILLAS tipo_junto COMILLAS COMA bloque_registros 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametros_datos",29, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-8)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque_registros ::= bloque_registros COMA parametro_registro 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_registros",33, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-2)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_registros ::= parametro_registro 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("bloque_registros",33, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametro_registro ::= COMILLAS NOREGISTRO COMILLAS DOSP COMILLAS tipo_ingreso COMILLAS 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("parametro_registro",30, ((java_cup.runtime.Symbol)CUP$parserALM$stack.elementAt(CUP$parserALM$top-6)), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_ingreso ::= ID 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",31, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_ingreso ::= USUARIO 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",31, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_ingreso ::= TITULO 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",31, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_ingreso ::= FECHA 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",31, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_ingreso ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parserALM$result = parser.getSymbolFactory().newSymbol("tipo_ingreso",31, ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserALM$stack.peek()), RESULT);
            }
          return CUP$parserALM$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserALM$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserALM$do_action(
    int                        CUP$parserALM$act_num,
    java_cup.runtime.lr_parser CUP$parserALM$parser,
    java.util.Stack            CUP$parserALM$stack,
    int                        CUP$parserALM$top)
    throws java.lang.Exception
    {
              return CUP$parserALM$do_action_part00000000(
                               CUP$parserALM$act_num,
                               CUP$parserALM$parser,
                               CUP$parserALM$stack,
                               CUP$parserALM$top);
    }
}

}
